# Generated by Django 3.1.5 on 2021-01-17 19:51

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('nickname', models.CharField(blank=True, max_length=32, null=True, verbose_name='昵称')),
                ('sex', models.CharField(default='男', max_length=8)),
                ('is_superuser', models.BooleanField()),
                ('remark', models.CharField(blank=True, max_length=128, null=True, verbose_name='备注')),
                ('last_ip', models.CharField(default='', max_length=64, verbose_name='最后登录的IP')),
                ('last_time', models.CharField(default='', max_length=32, verbose_name='最后的登录时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'ordering': ['-create_date'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=30, unique=True)),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
            ],
        ),
        migrations.CreateModel(
            name='Players',
            fields=[
                ('id', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('username', models.CharField(blank=True, max_length=32, null=True, verbose_name='用户名')),
                ('address', models.CharField(blank=True, max_length=64, null=True, verbose_name='地址')),
                ('password', models.CharField(blank=True, max_length=128, null=True, verbose_name='密码哈希')),
            ],
            options={
                'verbose_name': '参赛者',
                'ordering': ['-create_date'],
            },
        ),
        migrations.CreateModel(
            name='DockerName',
            fields=[
                ('id', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('image_name', models.CharField(max_length=30, unique=True)),
                ('image_description', models.CharField(max_length=1024)),
                ('image_img', models.CharField(default='registry.png', max_length=45)),
                ('images_status', models.CharField(max_length=45)),
                ('images_tag', models.CharField(max_length=45, unique=True)),
                ('flag_strings', models.CharField(default='flag{}', max_length=125, unique=True)),
                ('pull_status', models.CharField(max_length=45)),
                ('inside_port', models.CharField(default='', max_length=126)),
                ('score', models.IntegerField(default=0)),
                ('upload_file', models.CharField(default='s1riu5', max_length=125)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category', to='backend.category', verbose_name='镜像分¬类')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='所属用户')),
            ],
        ),
    ]
